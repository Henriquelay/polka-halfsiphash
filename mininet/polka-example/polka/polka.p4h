/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_IPV4 = 0x0800;
const bit<16> TYPE_SRCROUTING = 0x1234;
const bit<16> TYPE_SRCROUTING_PROBE = 0x1235;

//Ethernet frame payload padding and P4
//https://github.com/p4lang/p4-spec/issues/587

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

header srcRoute_t {
    bit<160>    routeId;
}

header srcRoute_probe_t {
    // Will be used as seed for random number generator
    bit<32>     timestamp;
    // Lightweight hash, used for checking packet path compliance
    bit<32>     l_hash;
}

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

struct metadata {
    bit<160>   routeId;
    // Will be used as seed for random number generator
    // bit<32>     timestamp;
    bit<16>   etherType;
    bit<1> apply_sr;
    bit<1> is_sr_probe;
    bit<9> port;
}

struct polka_t_top {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
    bit<160>    routeId;
    // Will be used as seed for random number generator
    bit<32>     timestamp;
    // Lightweight hash, used for checking packet path compliance
    bit<32>     l_hash;
}

struct headers {
    ethernet_t  ethernet;
    srcRoute_t  srcRoute;
    srcRoute_probe_t  srcRoute_probe;
    ipv4_t      ipv4;
}
